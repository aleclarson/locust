// Generated by CoffeeScript 1.12.7
var SortedArray, assertType, fs, loading, path;

require("./global");

module.exports = lotus;

SortedArray = require("SortedArray");

assertType = require("assertType");

path = require("path");

fs = require("fsx");

lotus.config = (function() {
  var configPath;
  configPath = path.join(lotus.path, "lotus.config.json");
  if (fs.isFile(configPath)) {
    return JSON.parse(fs.readFile(configPath));
  } else {
    throw Error("Missing global config: '" + configPath + "'");
  }
})();

lotus.isModuleIgnored = require("in-array").bind(null, lotus.config.ignoredModules);

Object.assign(lotus, {
  plugins: require("./PluginCache"),
  commands: Object.create(null),
  modulePlugins: [],
  moduleMixins: [],
  fileMixins: []
});

loading = (function() {
  var config, loader, options, plugins;
  plugins = lotus.plugins, config = lotus.config;
  if (!config.plugins) {
    return Promise.resolve();
  }
  if (!Array.isArray(config.plugins)) {
    throw TypeError("'config.plugins' must be an Array!");
  }
  options = {
    global: true
  };
  loader = function(plugin) {
    var commands;
    if (commands = plugin.loadCommands()) {
      Object.assign(lotus.commands, commands);
    }
    plugin.loadGlobals();
    plugin.loadFileMixin();
    plugin.loadModuleMixin();
  };
  return Promise.all(config.plugins, function(name) {
    return plugins.load(name, options, loader);
  }).then(function() {
    lotus.File = require("./File");
    lotus.Module = require("./Module");
    lotus.modules = require("./ModuleCache");
  });
})();

lotus.onInit = function(callback) {
  return loading.then(callback);
};

lotus.run = function(command, options) {
  if (options == null) {
    options = {};
  }
  assertType(command, String);
  assertType(options, Object.Maybe);
  return loading.then(function() {
    var args, method;
    args = command.split(" ");
    if (options._) {
      args = args.concat(options._);
    }
    command = args.shift();
    options._ = args;
    method = lotus.commands[command];
    if (method instanceof Function) {
      return method(options);
    } else {
      throw Error("Invalid command: '" + command + "'");
    }
  });
};

lotus.findModules = function(root) {
  var mods;
  assertType(root, String.Maybe);
  if (root == null) {
    root = lotus.path;
  }
  if (!path.isAbsolute(root)) {
    throw Error("Expected an absolute path: '" + root + "'");
  }
  if (!fs.isDir(root)) {
    throw Error("Expected a directory: '" + root + "'");
  }
  mods = new SortedArray(function(a, b) {
    a = a.name.toLowerCase();
    b = b.name.toLowerCase();
    if (a > b) {
      return 1;
    } else {
      return -1;
    }
  });
  return loading.then(function() {
    fs.readDir(root).forEach(function(modName) {
      var mod;
      try {
        mod = lotus.modules.load(modName);
      } catch (error) {}
      if (mod) {
        return mods.insert(mod);
      }
    });
    return mods.array;
  });
};
