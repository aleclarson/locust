// Generated by CoffeeScript 1.12.4
var Plugin, Type, assertType, isType, type;

assertType = require("assertType");

isType = require("isType");

Type = require("Type");

Plugin = require("./Plugin");

type = Type("PluginCache");

type.defineValues(function() {
  return {
    _plugins: Object.create(null),
    _loading: Object.create(null),
    _loaded: new Set
  };
});

type.defineMethods({
  get: function(name) {
    var plugin;
    assertType(name, String);
    if (plugin = this._plugins[name]) {
      return plugin;
    }
    this._plugins[name] = plugin = Plugin(name);
    return plugin;
  },
  load: function(name, options, loader) {
    var plugin, promise;
    if (arguments.length === 2) {
      loader = options;
      options = {};
    }
    assertType(options, Object);
    assertType(loader, Function);
    promise = this._loading[name] || Promise.resolve();
    plugin = this.get(name);
    promise = promise.then((function(_this) {
      return function() {
        var dep, deps, i, j, len, len1, loaded, loading, ref, ref1;
        loaded = plugin._loaded || _this._load(plugin);
        deps = [];
        if (!(options.global || !Array.isArray(loaded.globalDependencies))) {
          ref = loaded.globalDependencies;
          for (i = 0, len = ref.length; i < len; i++) {
            dep = ref[i];
            if (!_this._loaded.has(dep)) {
              throw Error("The '" + name + "' plugin depends on a global plugin that is missing: '" + dep + "'");
            }
          }
        }
        if (Array.isArray(loaded.dependencies)) {
          ref1 = loaded.dependencies;
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            dep = ref1[j];
            if (!(loading = _this._loading[dep])) {
              throw Error("The '" + name + "' plugin depends on a local plugin that is missing: '" + dep + "'");
            }
            deps.push(loading);
          }
        }
        return Promise.all(deps).then(function() {
          return loader(plugin);
        }).timeout(5000, function() {
          return log.warn("The '" + name + "' plugin failed to load within 5 seconds!");
        });
      };
    })(this));
    if (options.global) {
      this._loading[name] = promise = promise.then((function(_this) {
        return function() {
          if (options.global) {
            _this._loaded.add(name);
          }
        };
      })(this));
    }
    return promise.fail(function(error) {
      log.moat(1);
      log.white("The '" + name + "' plugin threw an error! \n");
      log.gray(error.stack);
      log.moat(1);
    });
  },
  _load: function(plugin) {
    var loaded, name;
    name = plugin.name;
    if (!lotus.isFile(name)) {
      throw Error("The '" + name + "' plugin does not exist!");
    }
    loaded = require(name);
    if (!isType(loaded, Object)) {
      throw TypeError("The '" + name + "' plugin failed to export an object!");
    }
    plugin._loaded = loaded;
    return loaded;
  }
});

module.exports = type.construct();
