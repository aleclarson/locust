// Generated by CoffeeScript 1.12.7
var Module, Type, fs, has, nodeModulesRE, path, type;

Type = require("Type");

path = require("path");

has = require("has");

fs = require("fsx");

Module = require("./Module");

nodeModulesRE = /\/node_modules\//;

type = Type("ModuleCache");

type.defineValues({
  _modules: Object.create(null),
  _length: 0
});

type.defineGetters({
  length: function() {
    return this._length;
  }
});

type.defineMethods({
  has: function(modName) {
    return has(this._modules, modName);
  },
  "delete": function(modName) {
    var mod;
    if (!(mod = this._modules[modName])) {
      return;
    }
    return mod;
  },
  get: function(modName, modPath) {
    var mod;
    if (mod = this._modules[modName]) {
      return mod;
    }
    mod = Module(modName, modPath);
    this._modules[modName] = mod;
    this._length += 1;
    return mod;
  },
  resolve: function(filePath) {
    var config, configPath, root;
    root = filePath;
    while (root !== "/") {
      root = path.dirname(root);
      configPath = path.join(root, "package.json");
      if (fs.exists(configPath)) {
        break;
      }
    }
    if (root === "/") {
      return null;
    }
    if (nodeModulesRE.test(configPath)) {
      if (!fs.isLink(path.dirname(configPath))) {
        return null;
      }
    }
    config = require(configPath);
    if (config.name) {
      return this._modules[config.name] || null;
    } else {
      return null;
    }
  },
  load: function(modPath) {
    var config, configPath;
    if (modPath[0] === ".") {
      modPath = path.resolve(modPath);
    } else if (!path.isAbsolute(modPath)) {
      modPath = path.resolve(lotus.path, modPath);
    }
    if (!fs.isDir(modPath)) {
      throw Error("Module path must be a directory: '" + modPath + "'");
    }
    configPath = path.join(modPath, "package.json");
    if (!fs.isFile(configPath)) {
      throw Error("Missing config file: '" + configPath + "'");
    }
    config = require(configPath);
    return this.get(config.name, modPath);
  }
});

module.exports = type.construct();
