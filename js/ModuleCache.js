// Generated by CoffeeScript 1.12.4
var Module, Type, fs, has, path, type;

Type = require("Type");

path = require("path");

has = require("has");

fs = require("fsx");

Module = require("./Module");

type = Type("ModuleCache");

type.defineValues({
  _modules: Object.create(null)
});

type.defineMethods({
  has: function(modName) {
    return has(this._modules, modName);
  },
  "delete": function(modName) {
    var mod;
    if (!(mod = this._modules[modName])) {
      return;
    }
    return mod;
  },
  get: function(modName, modPath) {
    var mod;
    if (mod = this._modules[modName]) {
      return mod;
    }
    if (!modPath) {
      return null;
    }
    mod = Module(modName, modPath);
    this._modules[modName] = mod;
    return mod;
  },
  resolve: function(filePath) {
    var packageJson, packageRoot;
    packageRoot = filePath;
    while (true) {
      packageRoot = path.dirname(packageRoot);
      packageJson = path.join(packageRoot, "package.json");
      if (fs.exists(packageJson)) {
        break;
      }
    }
    return this._modules[path.basename(packageRoot)];
  },
  load: function(modName) {
    var configPath, modPath;
    if (modName[0] === ".") {
      modPath = path.resolve(process.cwd(), modName);
      modName = path.basename(modPath);
    } else if (path.isAbsolute(modName)) {
      modPath = modName;
      modName = path.basename(modPath);
    } else {
      modPath = path.join(lotus.path, modName);
    }
    if (!fs.isDir(modPath)) {
      throw Error("Module path must be a directory: '" + modPath + "'");
    }
    configPath = path.join(modPath, "package.json");
    if (!fs.isFile(configPath)) {
      throw Error("Missing config file: '" + configPath + "'");
    }
    return this.get(modName, modPath);
  }
});

module.exports = type.construct();
